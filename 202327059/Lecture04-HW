#include <iostream>
#include <windows.h>

LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam);

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow)
{
    const wchar_t CLASS_NAME[] = L"Sample Window Class";
    WNDCLASS wc = { };

    wc.lpfnWndProc = WindowProc;
    wc.hInstance = hInstance;
    wc.lpszClassName = CLASS_NAME;

    RegisterClass(&wc);

    HWND hwnd = CreateWindowEx
    (
        0,
        CLASS_NAME,
        L"Mouse & Keyboard Events",
        WS_OVERLAPPEDWINDOW,
        CW_USEDEFAULT, CW_USEDEFAULT, 800, 600,
        NULL,
        NULL,
        hInstance,
        NULL
    );

    if (hwnd == NULL) 
    {
        return 0;
    }

    ShowWindow(hwnd, nCmdShow);

    MSG msg = { };
    while (GetMessage(&msg, NULL, 0, 0)) 
    {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

    return 0;
}

LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam) 
{
    static bool leftMouseDown = false;
    static bool rightMouseDown = false;

    switch (uMsg) 
    {
    case WM_DESTROY:
        PostQuitMessage(0);
        return 0;

    case WM_KEYDOWN:
        PostQuitMessage(0);
        return 0;

    case WM_LBUTTONDOWN:
        leftMouseDown = true;
        InvalidateRect(hwnd, NULL, TRUE); 
        return 0;

    case WM_LBUTTONUP:
        leftMouseDown = false;
        InvalidateRect(hwnd, NULL, TRUE);
        return 0;

    case WM_RBUTTONDOWN:
        rightMouseDown = true;
        InvalidateRect(hwnd, NULL, TRUE);
        return 0;

    case WM_RBUTTONUP:
        rightMouseDown = false;
        InvalidateRect(hwnd, NULL, TRUE); 
        return 0;

    case WM_MOUSEMOVE:
        if (leftMouseDown && rightMouseDown) 
        {
            SetClassLongPtr(hwnd, GCLP_HBRBACKGROUND, (LONG_PTR)CreateSolidBrush(RGB(255, 0, 255)));
        }
        else if (leftMouseDown) 
        {
            SetClassLongPtr(hwnd, GCLP_HBRBACKGROUND, (LONG_PTR)CreateSolidBrush(RGB(0, 255, 0)));
        }
        else if (rightMouseDown) 
        {
            SetClassLongPtr(hwnd, GCLP_HBRBACKGROUND, (LONG_PTR)CreateSolidBrush(RGB(0, 0, 255)));
        }
        else 
        {
            SetClassLongPtr(hwnd, GCLP_HBRBACKGROUND, (LONG_PTR)GetStockObject(BLACK_BRUSH));
        }
        InvalidateRect(hwnd, NULL, TRUE); 
        return 0;

    case WM_PAINT: 
    {
        PAINTSTRUCT ps;
        HDC hdc = BeginPaint(hwnd, &ps);
        FillRect(hdc, &ps.rcPaint, (HBRUSH)(COLOR_WINDOW + 1));
        EndPaint(hwnd, &ps);
        return 0;
    }

    }

    return DefWindowProc(hwnd, uMsg, wParam, lParam);
}
